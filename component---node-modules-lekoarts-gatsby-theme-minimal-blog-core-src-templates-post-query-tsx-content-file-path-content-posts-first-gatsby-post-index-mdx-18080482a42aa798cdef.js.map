{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-first-gatsby-post-index-mdx-18080482a42aa798cdef.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./content/posts/first-gatsby-post/SpotifyPlayer.js","webpack://minimal-blog/./content/posts/first-gatsby-post/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/* eslint react/no-unknown-property: 0 */\n/* eslint react/prefer-stateless-function: 0 */\n\n/**\n * Spotify player iframe widget\n *\n * @author Alexander Wallin <office@alexanderwallin.com>\n * @see https://developer.spotify.com/technologies/widgets/spotify-play-button/\n */\n\nimport * as React from \"react\"\n\n// Size presets, defined by Spotify\nconst sizePresets = {\n  large: {\n    width: 300,\n    height: 380,\n  },\n  compact: {\n    width: 300,\n    height: 80,\n  },\n}\n\nfunction SpotifyPlayer({ artist, theme }) {\n  return (\n    <iframe\n      title=\"Spotify\"\n      className=\"SpotifyPlayer\"\n      src={`https://open.spotify.com/embed/artist/${artist}?theme=${theme}`}\n      width=\"100%\"\n      height=\"380\"\n      allowfullscreen=\"\"\n      allow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture\"\n      frameBorder=\"0\"\n      allowtransparency=\"true\"\n    />\n  )\n}\n\nexport default SpotifyPlayer\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport SpotifyPlayer from \"./SpotifyPlayer\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"First post to move from Wordpres to Gatsby. The rest of the content will be added here soon.\\nFor now i'll just add some code to keep the examples with me.\"), \"\\n\", \"\\n\", React.createElement(_components.p, null, \"Take a while and listen a quality underground hip-hop from Wrocław/Poland:\"), \"\\n\", React.createElement(SpotifyPlayer, {\n    artist: \"5x5a0x3HdfTw6pzaKw0FVy\",\n    theme: \"0\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Here will a live code example go:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\",\n    \"react-live\": true\n  }, \"const onClick = () => {\\n  alert(\\\"You opened me\\\");\\n};\\nrender(<button onClick={onClick}>Alohomora!</button>);\\n\")), \"\\n\", React.createElement(_components.p, null, \"Here will a normal code block go:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"(function() {\\n\\nvar cache = {};\\nvar form = $('form');\\nvar minified = true;\\n\\nvar dependencies = {};\\n\\nvar treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';\\nvar treePromise = new Promise(function(resolve) {\\n\\t$u.xhr({\\n\\t\\turl: treeURL,\\n\\t\\tcallback: function(xhr) {\\n\\t\\t\\tif (xhr.status < 400) {\\n\\t\\t\\t\\tresolve(JSON.parse(xhr.responseText).tree);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"A code block with a JSDoc comment, short, and long comment:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"/**\\n * Get value out of string (e.g. rem => px)\\n * If value is px strip the px part\\n * If the input is already a number only return that value\\n * @param {string | number} input\\n * @param {number} [rootFontSize]\\n * @return {number} Number without last three characters\\n * @example removeLastThree('6rem') => 6\\n */\\nconst getValue = (input, rootFontSize = 16) => {\\n  if (typeof input === `number`) {\\n    return input / rootFontSize;\\n  }\\n\\n  const isPxValue = input.slice(-2) === `px`;\\n\\n  if (isPxValue) {\\n    return parseFloat(input.slice(0, -2));\\n  }\\n\\n  return parseFloat(input.slice(0, -3));\\n};\\n\\n// This is a little helper function\\nconst helper = (a, b) => a + b;\\n\\n// This is also a little helper function but this time with a really long one-line comment that should show some more details\\nconst morehelper = (a, b) => a * b;\\n\\nexport { getValue, helper, morehelper };\\n\")), \"\\n\", React.createElement(_components.p, null, \"Normal block without language:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"import Test from \\\"../components/test\\\"\\n\\nconst Layout = ({ children }) => (\\n  <Test>\\n    {children}\\n  </Test>\\n)\\n\\nexport default Layout\\n\")), \"\\n\", React.createElement(_components.p, null, \"Code block with code highlighting:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, Object.assign({\n    \"10\": true\n  }, {\n    className: \"language-jsx:title=src/components/post.jsx\"\n  }, {\n    \"5-7\": true\n  }), \"import * as React from \\\"react\\\";\\n\\nconst Post = ({ data: { post } }) => (\\n  <Layout>\\n    <Heading variant=\\\"h2\\\" as=\\\"h2\\\">\\n      {post.title}\\n    </Heading>\\n    <p\\n      sx={{\\n        color: `secondary`,\\n        mt: 3,\\n        a: { color: `secondary` },\\n        fontSize: [1, 1, 2],\\n      }}\\n    >\\n      <span>{post.date}</span>\\n      {post.tags && (\\n        <React.Fragment>\\n          {` — `}\\n          <ItemTags tags={post.tags} />\\n        </React.Fragment>\\n      )}\\n    </p>\\n    <section\\n      sx={{\\n        ...CodeStyles,\\n        my: 5,\\n        \\\".gatsby-resp-image-wrapper\\\": { my: 5, boxShadow: `lg` },\\n      }}\\n    >\\n      <MDXRenderer>{post.body}</MDXRenderer>\\n    </section>\\n  </Layout>\\n);\\n\\nexport default Post;\\n\")), \"\\n\", React.createElement(_components.p, null, \"Code block without title:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Harry Potter and the Philosopher's Stone\\n\")), \"\\n\", React.createElement(_components.p, null, \"Code block without lineNumbers (but lang):\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-text\",\n    noLineNumbers: true\n  }, \"Harry Potter and the Chamber of Secrets\\n\")), \"\\n\", React.createElement(_components.p, null, \"Code block without lineNumbers (and without lang):\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-noLineNumbers\"\n  }, \"Harry Potter and the Chamber of Secrets\\n\")), \"\\n\", React.createElement(_components.p, null, \"Code block with only the title:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-:title=src/utils/scream.js\"\n  }, \"const scream = (input) => window.alert(input)\\n\")), \"\\n\", React.createElement(_components.p, null, \"Code block with only the title but without lineNumbers:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-:title=src/utils/scream.js\",\n    noLineNumbers: true\n  }, \"const scream = (input) => window.alert(input)\\n\")), \"\\n\", React.createElement(_components.p, null, \"Line highlighting without code title:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, Object.assign({\n    \"2\": true\n  }, {\n    className: \"language-js\"\n  }, {\n    \"4-5\": true\n  }), \"const test = 3;\\nconst foo = \\\"bar\\\";\\nconst harry = \\\"potter\\\";\\nconst hermione = \\\"granger\\\";\\nconst ron = \\\"weasley\\\";\\n\")), \"\\n\", React.createElement(_components.p, null, \"Here will \", React.createElement(_components.code, null, \"inline code\"), \" go, just inside the text. Wow!\"), \"\\n\", React.createElement(_components.p, null, \"Code block without line numbers but with highlighting, language, and title:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, Object.assign({\n    \"16\": true\n  }, {\n    className: \"language-tsx:title=src/components/blog.tsx\"\n  }, {\n    \"7-9\": true\n  }, {\n    noLineNumbers: true\n  }), \"import * as React from \\\"react\\\";\\n\\nconst Blog = ({ posts }: PostsProps) => {\\n  const { tagsPath, basePath } = useSiteMetadata();\\n\\n  return (\\n    <Layout>\\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between` }}>\\n        <Heading variant=\\\"h2\\\" as=\\\"h2\\\">\\n          Blog\\n        </Heading>\\n        <Styled.a\\n          as={Link}\\n          sx={{ variant: `links.secondary` }}\\n          to={`/${basePath}/${tagsPath}`.replace(/\\\\/\\\\/+/g, `/`)}\\n        >\\n          View all tags\\n        </Styled.a>\\n      </Flex>\\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\\n    </Layout>\\n  );\\n};\\n\\nexport default Blog;\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/blog/blog/content/posts/first-gatsby-post/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","artist","theme","className","width","height","allowfullscreen","allow","frameBorder","allowtransparency","_createMdxContent","_components","Object","assign","p","pre","code","_provideComponents","components","SpotifyPlayer","noLineNumbers","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","name","content","property","rel","type","sizes","href","withPrefix","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes"],"sourceRoot":""}